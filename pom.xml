<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>jcoding</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>jcoding</name>
  <description>jcoding project for Spring Boot</description>

  <properties>
    <java.version>1.8</java.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.javassist</groupId>
      <artifactId>javassist</artifactId>
      <version>3.20.0-GA</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>26.0-jre</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
      <version>RELEASE</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.example</groupId>
      <artifactId>jcoding</artifactId>
      <version>0.0.1-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.16</version>
    </dependency>

    <dependency>
      <groupId>org.openjdk.jol</groupId>
      <artifactId>jol-core</artifactId>
      <version>0.10</version>
    </dependency>
  </dependencies>



  <build>
    <sourceDirectory>src/main/java</sourceDirectory>
    <resources>
      <!-- 把src/main/resources目录下所有的文件拷贝到conf目录中 -->
      <resource>
        <directory>src/main/resources</directory>
        <targetPath>${project.build.directory}/conf</targetPath>
      </resource>
      <!-- 把lib目录下所有的文件拷贝到lib目录中
      （可能有些jar包没有办法在maven中找到，需要放在lib目录中） -->
      <resource>
        <directory>lib</directory>
        <targetPath>${project.build.directory}/lib</targetPath>
      </resource>
      <!-- 把放在根目录下的脚本文件.sh,.bat拷贝到bin目录中 -->
      <resource>
        <directory>.</directory>
        <includes>
          <include>**/*.sh</include>
          <include>**/*.bat</include>
        </includes>
        <targetPath>${project.build.directory}/bin</targetPath>
      </resource>
    </resources>

    <plugins>
      <!-- 用于编译的plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <fork>true</fork>
          <source>1.8</source>
          <target>1.8</target>
          <encoding>UTF-8</encoding>
          <!-- 如果配置了JAVA_HOME,下面应该可以不用配 -->
        </configuration>
      </plugin>

      <!-- 用于生成jar包的plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <!-- 把生成的jar包放在lib目录下（和其他所有jar包一起） -->
          <outputDirectory>${project.build.directory}/lib</outputDirectory>
          <archive>
            <!--使用manifestFile属性配置自定义的参数文件所在的-->
            <manifestEntries>
              <!--Premain-Class为key，这个<Premain-Class>中的值为value -->
              <!--<Premain-Class>com.proxy.MyProxyTransformer</Premain-Class>-->
              <Agent-Class>agent.AgentMain</Agent-Class>
              <Can-Redefine-Classes>true</Can-Redefine-Classes>
              <Can-Retransform-Classes>true</Can-Retransform-Classes>
            </manifestEntries>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
            </manifest>
          </archive>
          <excludes>
            <!-- 排除掉一些文件,不要放到jar包中，
            这里是为了排除掉src/main/resources中的文件（它们应该放到conf目录）
            这里只能指定要排除的目标文件，而不能指定源文件，虽然不够完美，但是基本能达到目的。 -->
            <exclude>*.xml</exclude>
            <exclude>*.properties</exclude>
          </excludes>
        </configuration>
      </plugin>

      <!-- 用于拷贝maven依赖的plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.10</version>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <!-- 把依赖的所有maven jar包拷贝到lib目录中（这样所有的jar包都在lib目录中） -->
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- 用于拷贝resource的plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>

      <!-- 配置生成源代码jar的plugin -->
      <plugin>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.2.1</version>
        <configuration>
          <attach>true</attach>
          <!-- 配置源代码jar文件的存放路径，和其他jar文件一起放在lib目录 -->
          <outputDirectory>${project.build.directory}/lib</outputDirectory>
        </configuration>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>
